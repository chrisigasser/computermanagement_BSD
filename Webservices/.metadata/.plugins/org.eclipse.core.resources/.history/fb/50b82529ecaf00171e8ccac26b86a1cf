package at.Database;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.*;
import java.util.Properties;

public class ConnectionFactory {
	
	private static String driver = "com.mysql.jdbc.Driver";
	private static String driverURL = "jdbc:mysql://";
	private static String user = "pupil";
	private static String pwd = "pupil";
	private static String host = "localhost:3306/";
	private static String database = "a00";
	
	
	
	public static void setDriver(String driver) {
		ConnectionFactory.driver = driver;
		try {
			Class.forName(driver);
		}
		catch(ClassNotFoundException ex) {
			System.err.println(ex.getMessage());
		}
	}

	public static void setDriverURL(String driverURL) {
		ConnectionFactory.driverURL = driverURL;
	}

	public static void setUser(String user) {
		ConnectionFactory.user = user;
	}

	public static void setPwd(String pwd) {
		ConnectionFactory.pwd = pwd;
	}

	public static void setHost(String host) {
		ConnectionFactory.host = host;
	}

	public static void setDatabase(String database) {
		ConnectionFactory.database = database;
	}

	public static void setMyReference(ConnectionFactory myReference) {
		ConnectionFactory.myReference = myReference;
	}

	public static String getDriver() {
		return driver;
	}

	public static String getDriverURL() {
		return driverURL;
	}

	public static String getUser() {
		return user;
	}

	public static String getPwd() {
		return pwd;
	}

	public static String getHost() {
		return host;
	}

	public static String getDatabase() {
		return database;
	}

	public static ConnectionFactory getMyReference() {
		return myReference;
	}

	private static ConnectionFactory myReference = new ConnectionFactory();
	
	private ConnectionFactory() {
		try {
			Class.forName(driver);
		}
		catch(ClassNotFoundException ex) {
			System.err.println(ex.getMessage());
		}
	}
	
	public static Connection get() throws SQLException{
		String url = driverURL +host + database;
		return DriverManager.getConnection(url,user,pwd);
	}
	
	public static boolean close(Connection con) {
		try {
			con.close();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	public static boolean close(Statement stmt) {
		try {
			stmt.close();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static boolean close(ResultSet rs) {
		try {
			rs.close();
			return true;
		}
		catch (Exception ignore)
		{
			return false;
		}
	}
	
	public static void loadConfig(String filePath) {
		Properties prop = new Properties();
		InputStream input = null;

		try {

			input = new FileInputStream(filePath);
			prop.load(input);

			setDriver(prop.getProperty("driver"));
			driverURL = prop.getProperty("driverURL");
			user = prop.getProperty("user");
			pwd = prop.getProperty("pwd");
			host = prop.getProperty("host");
			database = prop.getProperty("database");
			
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}																								
	}
	
	public static void safeConfig(String filePath) {
		Properties prop = new Properties();
		OutputStream output = null;

		try {

			output = new FileOutputStream(filePath);
			
			// set the properties value
			prop.setProperty("driver", driver);
			prop.setProperty("driverURL", driverURL);
			prop.setProperty("user", user);
			prop.setProperty("pwd", pwd);
			prop.setProperty("host", host);
			prop.setProperty("database", database);

			prop.store(output, null);

		} catch (IOException io) {
			io.printStackTrace();
		} finally {
			if (output != null) {
				try {
					output.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}

		}
	}
}
